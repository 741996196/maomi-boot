#默认的springboot的端口是8080


#默认的springboot的端口是8080
#修改端口
server.port=8080

#随机端口
#如果在用一台服务器上，多个服务器如果用同一个端口造成端口冲突
#在现实的微服务（spring cloud,dubbo）开发中，开发人员是不用记住ip和端口的
#server.port= ${random.int[1024,9999]}

#自定义属性配置
#@value的作用是：为了简化读取application.yml文件中的配置值
#yancy.msg= hi,hello,world!

#spring boot的日志框架:logback,log4j,slf4j
#1.logback,log4j:是日志实现框架，就是实现怎么记录日志的。
#2.slf4j:提供了java中所有的日志框架的简单抽象（日志的门面设计模式），说白了就是日志API(没有实现类)，它不能单独使用
#故：必须结合logback或者log4j日志框架实现
#spring boot的spring-boot-starter-logging依赖的logback,log4j,slf4j的框架，直接使用loggin就可以了。

#spring boot的日志配置
#spring boot2.0默认采用了slf4j+logback的日志搭配。
#在开发过程中，我们都采用了slf4j的api去记录日志，底层实现就是根据配置logback或者log4j日志框架

#因为spring boot的日志默认是info级别的所以设置trace，debug级别才不会显示
#spring boot日志级别设置,显示包括trace和它以下的级别
#在哪个个包下面
logging.level.com.maomi.boot=trace
#配置日志的生成存储路径和日志名称
#在实际的开发中，你不可能一直看着控制台，而且日志会非常大，瞬间就丢失
#故，我们要把日志存储在指定的目录下
#配置的效果为：在项目的根目录下/output/logs/spring.log,默认日志名为spring.log
#  path: output/logs
#如果不想要把日志存放在logging.path默认的根目录下，那就采用自定义的目录和文件名，logging.file和logging.path不能同时存在
#  file: /Volumes/date/logs/springboot.log

#配置日志的内容格式
#%d-时间格式，%thread-线程，%-5level-从左5字符宽度 %logger(50)-日志50个字符，%msg-信息，%n-换行
#设置在控制台输出的日志格式
# logging.pattern.console= '%d{yyyy-MM-dd} [%thread] %-5level %logger(50) -%msg%n'
#设置输出到文件的日志格式
# logging.pattern.file:='%d{yyyy-MM-dd}===[%thread]===%-5level===%logger(50)===%msg%n'


#表示是否开启Swagger,一般线上环境时关闭的
spring.swagger2.enabled=true




#myBatis配置
spring.application.name=spring-boot-mybatis
#指定mapper.xml的位置
#mybatis.mapper-locations=classpath*:com/yancy/boot/mapper/xml/*.xml

#数据库驱动和ip
#spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/boot_user?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull
#spring.datasource.username=root
#spring.datasource.password=123456


# 数据源配置
# 数据源 user
spring.datasource.druid.user.url=jdbc:mysql://localhost:3306/boot_user?useSSL=false&useUnicode=true&characterEncoding=UTF8&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.druid.user.username=root
spring.datasource.druid.user.password=123456
spring.datasource.druid.user.driver-class-name=com.mysql.cj.jdbc.Driver
#初始化连接大小:连接池建立时创建的初始化连接数
spring.datasource.druid.user.initial-size=5
#最小空闲连接数:连接池中最小的活跃连接数
spring.datasource.druid.user.min-idle=15
#最大连接数:连接池中最大的活跃连接数
spring.datasource.druid.user.max-active=60
spring.datasource.druid.user.validation-query=SELECT 1
#获取连接时检测：是否在获得连接后检测其可用性
spring.datasource.druid.user.test-on-borrow=true
#空闲时检测：是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.user.test-while-idle=true
#连接保持空闲而不被驱逐的最长时间
spring.datasource.druid.user.time-between-eviction-runs-millis=60000

# 数据源配置
# 数据源 account
spring.datasource.druid.account.url=jdbc:mysql://localhost:3306/xa_account?useSSL=false&useUnicode=true&characterEncoding=UTF8&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.druid.account.username=root
spring.datasource.druid.account.password=123456
spring.datasource.druid.account.driver-class-name=com.mysql.cj.jdbc.Driver
#初始化连接大小:连接池建立时创建的初始化连接数
spring.datasource.druid.account.initial-size=5
#最小空闲连接数:连接池中最小的活跃连接数
spring.datasource.druid.account.min-idle=15
#最大连接数:连接池中最大的活跃连接数
spring.datasource.druid.account.max-active=60
spring.datasource.druid.account.validation-query=SELECT 1
#获取连接时检测：是否在获得连接后检测其可用性
spring.datasource.druid.account.test-on-borrow=true
#空闲时检测：是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.account.test-while-idle=true
#连接保持空闲而不被驱逐的最长时间
spring.datasource.druid.account.time-between-eviction-runs-millis=60000


#数据源 redpacket
spring.datasource.druid.redpacket.url=jdbc:mysql://localhost:3306/xa_red_account?useSSL=false&useUnicode=true&characterEncoding=UTF8&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.druid.redpacket.username=root
spring.datasource.druid.redpacket.password=123456
spring.datasource.druid.redpacket.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.redpacket.initial-size=5
spring.datasource.druid.redpacket.min-idle=15
spring.datasource.druid.redpacket.max-active=60
spring.datasource.druid.redpacket.validation-query=SELECT 1
spring.datasource.druid.redpacket.test-on-borrow=true
spring.datasource.druid.redpacket.test-while-idle=true
spring.datasource.druid.redpacket.time-between-eviction-runs-millis=60000


# 合并多个datasource监控
spring.datasource.druid.use-global-data-source-stat=true

#配置druid显示监控统计信息
#开启Druid的监控平台 http://localhost:9090/druid
#1. StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
spring.datasource.druid.stat-view-servlet.reset-enable=false
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=yancy
#spring.datasource.druid.stat-view-servlet.allow=
#spring.datasource.druid.stat-view-servlet.deny=

#2. WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
spring.datasource.druid.web-stat-filter.enabled=true
spring.datasource.druid.web-stat-filter.url-pattern=/*
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
#spring.datasource.druid.web-stat-filter.session-stat-enable=
#spring.datasource.druid.web-stat-filter.session-stat-max-count=
#spring.datasource.druid.web-stat-filter.principal-session-name=
#spring.datasource.druid.web-stat-filter.principal-cookie-name=
#spring.datasource.druid.web-stat-filter.profile-enable=

 #3. Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置
#spring.datasource.druid.aop-patterns= #Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔


#Spring Boot2.1以上 默认禁用那种bean覆盖(作用 用于兼容低版本)
spring.main.allow-bean-definition-overriding=true


#分布式事务jta相关参数配置
jta.log-dir.classpath=tx-logs
jta.transaction-manager-id= txManager

# Redis数据库索引（默认为0）
spring.redis.database=0 
# Redis服务器地址
spring.redis.host=localhost
#Redis服务器连接端口
spring.redis.port=6379
#Redis服务器连接密码（默认为空）
spring.redis.password=
#连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
#连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
#连接池中的最大空闲连接
spring.redis.pool.max-idle=8
#连接池中的最小空闲连接
spring.redis.pool.min-idle=0
#连接超时时间（毫秒）
spring.redis.timeout=30000
